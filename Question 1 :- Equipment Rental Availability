import java.util.*;
public class EquipmentRental{
    public static List<Integer>
    findNearestEquipment(
        int n,
        List<int[]>edges,
        Map<Integer,List<String>>availability,
        int startProvider,
        String targetEquipment){

        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            graph.put(i, new ArrayList<>());
        }

        for (int[] edge : edges) {
            int a = edge[0], b = edge[1];
            graph.get(a).add(b);
            graph.get(b).add(a);
        }
         
         Queue<List<Integer>> queue = new LinkedList<>();
         Set<Integer> visited = new HashSet<>();
 
         queue.offer(Arrays.asList(startProvider));
         visited.add(startProvider);
 
         
         while (!queue.isEmpty()) {
             List<Integer> path = queue.poll();
             int current = path.get(path.size() - 1);
 
             
             List<String> currentAvailability = availability.getOrDefault(current, new ArrayList<>());
             if (currentAvailability.contains(targetEquipment)) {
                 return path;
             }
 
             
             for (int neighbor : graph.get(current)) {
                 if (!visited.contains(neighbor)) {
                     visited.add(neighbor);
                     List<Integer> newPath = new ArrayList<>(path);
                     newPath.add(neighbor);
                     queue.offer(newPath);
                 }
             }
         }
 
         
         return new ArrayList<>();
 

        }
        public static void main(String[] args) {
            int n = 5;
            List<int[]> edges = Arrays.asList(
                new int[]{1, 2},
                new int[]{2, 3},
                new int[]{3, 4},
                new int[]{4, 5}
            );
    
            Map<Integer, List<String>> availability = new HashMap<>();
            availability.put(1, Arrays.asList("excavator"));
            availability.put(2, Arrays.asList());
            availability.put(3, Arrays.asList("bulldozer"));
            availability.put(4, Arrays.asList("excavator"));
            availability.put(5, Arrays.asList("crane"));
    
            int startProvider = 2;
            String targetEquipment = "excavator";
    
            List<Integer> result = findNearestEquipment(n, edges, availability, startProvider, targetEquipment);
    
            if (result.isEmpty()) {
                System.out.println("No provider found with the requested equipment.");
            } else {
                System.out.println("Shortest path: " + result);
            }
        }
    }
